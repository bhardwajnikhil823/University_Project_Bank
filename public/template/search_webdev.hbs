<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       
            body {
  background-image: url("https://res.cloudinary.com/practicaldev/image/fetch/s--Pfg39W4P--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/i/4501yfcx04h5jkb33cjl.jpeg");
  background-color: #cccccc;
  background-size: cover;
  background-repeat: no-repeat;
        }
        @import url(https://fonts.googleapis.com/css?family=Cabin:400);

        .webdesigntuts-workshop:before,
        .webdesigntuts-workshop:after {
            content: '';
            display: block;
            height: 1px;
            left: 50%;
            margin: 0 0 0 -400px;
            position: absolute;
            width: 400px;
        }

        .webdesigntuts-workshop:before {
            background: #444;
            background: linear-gradient(left, #151515, #444, #151515);
            top: 192px;
        }

        .webdesigntuts-workshop:after {
            background: #000;
            background: linear-gradient(left, #151515, #000, #151515);
            top: 191px;
        }

        .webdesigntuts-workshop form {
            background: #111;
            background: linear-gradient(#1b1b1b, #111);
            border: 1px solid #000;
            border-radius: 5px;
            box-shadow: inset 0 0 0 1px #272727;
            display: inline-block;
            font-size: 0px;
            margin: 150px auto 0;
            padding: 20px;
            position: relative;
            z-index: 1;
            width: 300px;
        }

        .webdesigntuts-workshop input {
            background: #222;
            background: linear-gradient(#333, #222);
            border: 1px solid #444;
            border-radius: 5px 0 0 5px;
            box-shadow: 0 2px 0 #000;
            color: #770909;
            display: block;
            float: left;
            font-family: 'Cabin', helvetica, arial, sans-serif;
            font-size: 13px;
            font-weight: 400;
            height: 40px;
            margin: 0;
            padding: 0 10px;
            text-shadow: 0 -1px 0 #000;
            width: 300px;
        }

        .ie .webdesigntuts-workshop input {
            line-height: 40px;
        }

        .webdesigntuts-workshop input::-webkit-input-placeholder {
            color: #888;
        }

        .webdesigntuts-workshop input:-moz-placeholder {
            color: #888;
        }

        .webdesigntuts-workshop input:focus {
            animation: glow 800ms ease-out infinite alternate;
            background: #222922;
            background: linear-gradient(#333933, #222922);
            border-color: #393;
            box-shadow: 0 0 5px rgba(0, 255, 0, .2), inset 0 0 5px rgba(0, 255, 0, .1), 0 2px 0 #000;
            color: #efe;
            outline: none;
        }

        .webdesigntuts-workshop input:focus::-webkit-input-placeholder {
            color: #efe;
        }

        .webdesigntuts-workshop input:focus:-moz-placeholder {
            color: #efe;
        }

        .webdesigntuts-workshop button {
            background: #222;
            background: linear-gradient(#333, #222);
            box-sizing: border-box;
            border: 1px solid #444;
            border-left-color: #000;
            border-radius: 0 5px 5px 0;
            box-shadow: 0 2px 0 #000;
            color: #f1f1f1;
            display: block;
            float: left;
            font-family: 'Cabin', helvetica, arial, sans-serif;
            font-size: 13px;
            font-weight: 400;
            height: 40px;
            line-height: 40px;
           margin-left: 100px;
            {{!-- margin: 0; --}}
            padding: 0;
            position: relative;
            text-shadow: 0 -1px 0 #000;
            width: 100px;
        }

        .webdesigntuts-workshop button:hover,
        .webdesigntuts-workshop button:focus {
            background: #292929;
            background: linear-gradient(#393939, #292929);
            color: #5f5;
            outline: none;
        }

        .webdesigntuts-workshop button:active {
            background: #292929;
            background: linear-gradient(#393939, #292929);
            box-shadow: 0 1px 0 #000, inset 1px 0 1px #222;
            top: 1px;
        }

        @keyframes glow {
            0% {
                border-color: #393;
                box-shadow: 0 0 5px rgba(0, 255, 0, .2), inset 0 0 5px rgba(0, 255, 0, .1), 0 2px 0 #000;
            }

            100% {
                border-color: #6f6;
                box-shadow: 0 0 20px rgba(0, 255, 0, .6), inset 0 0 10px rgba(0, 255, 0, .4), 0 2px 0 #000;
            }
        }
           .search_box{
            margin-left: 600px;
            margin-top: 50px;
           width: 400px;
        }
        .search_btn{
             margin-left: 800px;
            margin-top: -44 px;
            
        }
        .searchtext{
            
            margin-top: 180px;
            margin-left: 150px;
            font-size: 80px;
  color: #bdf30e;
  text-align: center;
  -webkit-animation: glow 1s ease-in-out infinite alternate;
  -moz-animation: glow 1s ease-in-out infinite alternate;
  animation: glow 1s ease-in-out infinite alternate;
        }

         .autocomplete {
  position: fixed;
  display: inline-block;
   -webkit-animation: glow 1s ease-in-out infinite alternate;
  -moz-animation: glow 1s ease-in-out infinite alternate;
  animation: glow 1s ease-in-out infinite alternate;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #292929; 
  color:#393;
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
} 

input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}

input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}

    </style>
</head>

<body>
    <section class="webdesigntuts-workshop">
        <div class="searchtext">  <h1> Search WEBD Project</h1></div>
        <div class="search_box" autocomplete="off">
          <div class="autocomplete">  <input type="search" placeholder="What are you looking for?" id="searchbox" ></div>
        </div>
         <div class="search_btn"> <button id="search">Search</button></div>
    </section>
    <script type="module">
        function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

/*An array containing all the country names in the world:*/
var countries = [];

function GetAllDataOnce() {
            const dbRef = ref(bd,"ProjectApproveList");
           onValue(dbRef,(snapshot) => {
            snapshot.forEach(childSnapshot => {
            var name = childSnapshot.val().ProjectName;
            var sub = childSnapshot.val().Subject;
            var temp = name.split('.');
            var fname = temp.slice(0,-1).join('.');
                if(sub == "WEBD"){
                    console.log(fname);
                    countries.push(fname);
                }
            });
           })
}
        window.onload = GetAllDataOnce;

/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
autocomplete(document.getElementById("searchbox"), countries);

        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.19.1/firebase-app.js";
        const firebaseConfig = {
            apiKey: "AIzaSyD-Ki5P8lES0jeEIeQ4BZEV3ksZbWoQAa4",
            authDomain: "seprozect.firebaseapp.com",
            databaseURL: "https://seprozect-default-rtdb.firebaseio.com",
            projectId: "seprozect",
            storageBucket: "seprozect.appspot.com",
            messagingSenderId: "245001401384",
            appId: "1:245001401384:web:6a0bd0758311047584711d"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        import { getStorage, ref as sRef, uploadBytesResumable, getDownloadURL }
            from "https://www.gstatic.com/firebasejs/9.19.1/firebase-storage.js";

        import { getDatabase, ref, set, child, get, update, remove, onValue} from "https://www.gstatic.com/firebasejs/9.19.1/firebase-database.js";
        const db = getDatabase();
        const bd = getDatabase();

        var searchbox = document.getElementById('searchbox');
        var search = document.getElementById('search');

         function SelectData() {
            const dbref = ref(db);
            get(child(dbref, "ProjectApproveList/" + searchbox.value)).then((snapshot) => {
                if (snapshot.exists()) {
                    var loc = window.location.href;
                    window.location.href = snapshot.val().ProjectURL;
                    console.log(loc);
                }
                else {
                    alert("No data found");
                }
            })
                .catch((error) => {
                    alert("unsuccessful, error" + error);
                });
        } 
        function AuthenticateUser() {
            const dbref = ref(db);
            // priary key is not special character in primary key 
            get(child(dbref, "ProjectApproveList/" + searchbox.value)).then((snapshot) => {
                if (snapshot.exists()) {
                console.log(snapshot.val());
                sessionStorage.setItem('pro',JSON.stringify(snapshot.val()));
                var loc = window.location.href;
                window.location.href = "https://university-prohect-bankkk.onrender.com/searchresult";
                console.log(loc);
                }
                else {
                    alert("No data found");
                }
            });
        }

        function hello(pro){
                sessionStorage.setItem('pro',JSON.stringify(pro));
                var loc = window.location.href;
                window.location.href = "http://localhost:3000/searchresult";
                console.log(loc);
        }

        search.addEventListener('click', AuthenticateUser);
    </script>
</body>

</html>
